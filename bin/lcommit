#!/usr/bin/env node
var argv = require('yargs').argv,
    shell = require('shelljs'),
    chromeLauncher = require('chrome-launcher'),
    CDP = require('chrome-remote-interface'),
    NodeGeocoder = require('node-geocoder'),
    { Signale } = require('signale');

const { LCOMMIT_GEO_API_KEY = '' } = process.env;

const customSignale = new Signale({
  disabled: false,
  interactive: false,
  stream: process.stdout,
  scope: 'lcommit',
  types: {
    geocoderError: {
      badge: '**',
      color: 'red',
      label: 'geocoder error'
    },

    locationAllowError: {
      badge: '**',
      color: 'red',
      label: 'Know your location'
    }
  }
});

// :XXX OPTÄ°ONS ?
var geocoder = NodeGeocoder({
  provider: 'google',
  httpAdapter: 'https',
  apiKey: LCOMMIT_GEO_API_KEY // Status is OVER_QUERY_LIMIT. You have exceeded your daily request quota for this API.
});

function launchChrome(headless=false) {
  return chromeLauncher.launch({
    port: 3131,
    startingUrl: 'https://lcommit.now.sh/get',
    chromeFlags: [ ]
  });
}

return (async function() {
  const chrome = await launchChrome();
  const protocol = await CDP({port: chrome.port});

  const { Page, Runtime } = protocol;

  await Promise.all([
    Page.enable(), Runtime.enable()
  ]);

  // Wait for window.onload before doing stuff.
  Page.loadEventFired(async () => {
    const requestRuntime = await Runtime.evaluate({
      returnByValue: true,
      awaitPromise: true,
      expression: `
        new Promise((resolve, reject) => {
          navigator.geolocation.getCurrentPosition(({ coords }) => {
            resolve({
              status: true,
              latitude: coords.latitude,
              longitude: coords.longitude
            });
          }, () => {
            reject({
              status: false
            })
          });
        })
      `
    });

    // resullt request runtime.
    const { result: { value } } = requestRuntime;

    if (value.status) {
      geocoder.reverse({ lat: value.latitude, lon: value.longitude }, (err, results) => {
        if (err) {
          return customSignale.geocoderError(err);
        }

        // geo results.
        const [ geo ] = results;
        const { level1short, level2short, level4short } = geo.administrativeLevels;

        // git commit address.
        return shell.exec(`git commit -am "${argv.am} - ${level1short}/${level2short}/${level4short}"`);
      });

      return chrome.kill();
    }


    // error show.
    customSignale.locationAllowError('Please Click allow / share Location if you are prompted like above.');

    return chrome.kill();
  });
})();
